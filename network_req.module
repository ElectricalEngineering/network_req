<?php

/*
 * @file network_req.module
 * main module file for EE network request drupal module
 */
/**
 * Implements hook_init().
 */
function network_req_init() {

  require_once(DRUPAL_ROOT . '/' . drupal_get_path('module', 'network_req') . '/su-whois/su-whois.php');
  require_once(DRUPAL_ROOT . '/' . drupal_get_path('module', 'network_req') . '/includes/network_req_validate.inc.php');
  drupal_add_js(drupal_get_path('module', 'network_req') . '/js/jquery.cookie.js');
  drupal_add_js(drupal_get_path('module', 'network_req') . '/js/jquery.search.js');
  drupal_add_js(drupal_get_path('module', 'network_req') . '/js/network_req.js');
  drupal_add_css(drupal_get_path('module', 'network_req') . '/css/network-req.css');

}
/**
 * Implements hook_theme().
 */
function network_req_theme() {

  return array(
    'default' => array(
      'variables' => array(
        'ebody' => NULL,
        'eheaders' => NULL,
      ),
      'template' => 'templates/email',
    ),
    'view' => array(
      'variables' => array(
        'data' => NULL,
        'count' => NULL,
        'ts' => NULL,
      ),
      'template' => 'templates/record--view',
    ),
    'network-request-single' => array(
      'variables' => array(
        'data' => NULL,
      ),
      'template' => 'templates/network-request-single',
    ),
    'network-request-mac' => array(
      'variables' => array(
        'module_directory' => drupal_get_path('module', 'network_req')
      ),
      'template' => 'templates/network-request-mac',
    ),
  );
}

/**
 * Implements hook_help().
 */
function network_req_help($path, $arg) {

  switch ($path):
    case 'admin/help#network_req':
      return t('Creates a network request form.');
      break;

    case 'admin/config/modules#description':
      return t('Creates a network request form.');
      break;

    case 'admin/config/content/network-req':
      return t('Settings for the network request module.');
      break;

    case 'admin/config/content/network-req/submissions':
      return t('View, update or delete network request submissions.');
      break;

  endswitch;

}
/**
 * Implements hook_permission().
 */
function network_req_permission() {
  return array(
    'administrate network_req' => array(
      'title' => t('Administrate EE Network Request'),
      'description' => t('Allow users to administer the EE Network Request'),
    ),
    'view network_req' => array(
      'title' => t('View EE Network Request'),
      'description' => t('Allow users to view EE Network Request'),
    ),
  );
}

/**
 * Implements hook_access().
 */
function network_req_access() {
  return user_access(array('administrate network_req', 'view network_req'));
}
/**
 * Implements hook_menu().
 */
function network_req_menu() {

  $items['admin/config/content/network-req'] = array(
    'title' => t('Network Request'),
    'description' => t('Network Request Options'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('network_req_options'),
    'access arguments' => array('administrate network_req'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/content/network-req/submissions/%/view'] = array(
    'title' => t('Delete Record %'),
    'description' => t('Delete a network request submission'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('network_req_submissions_delete', 5),
    'access arguments' => array('administrate network_req'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['admin/config/content/network-req/settings'] = array(
    'title' => t('Network Request'),
    'description' => t('Network Request Options'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('network_req_options'),
    'access arguments' => array('administrate network_req'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/content/network-req/submissions'] = array(
    'title' => t('Network Request Submissions'),
    'description' => t('Network Request Submissions'),
    'page callback' => 'network_req_submissions',
    'access arguments' => array('administrate network_req'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['network-request'] = array(
    'title' => t('Network Request'),
    'description' => t('@dept Network Request Form', array('@dept' => variable_get('network_req_dept', 'Electrical Engineering') ) ),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('network_req_form'),
    'access arguments' => array('view network_req'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['network-request/find-mac'] = array(
    'title' => t('How to find your MAC Address'),
    'description' => t('How do I find my MAC address?'),
    'page callback' => 'theme',
    'page arguments' => array('network-request-mac'),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}
/**
 * Form to delete a network record in the database
 * @param int $rid
 *   ID of record
 */
function network_req_submissions_delete($form, &$form_state, $rid) {
  global $base_url;

  $result = db_query('SELECT * FROM {network_req} WHERE rid = :rid', array(':rid' => $rid) );
  $count = $result->rowCount();
  if( $count <= 0 ):
    drupal_set_title('Error!');
    $return_url = l('Return', $base_url . '/admin/config/content/network-req/submissions');
    drupal_set_message( sprintf('<p>Sorry, there is no record %s in the database. </p><p>%s to submissions.</p>', $rid, $return_url), 'error');
    return false;

  else:
    $data = $result->fetch();
  endif;

  $breadcrumb = drupal_get_breadcrumb();
  $breadcrumb[ ( count($breadcrumb) - 1 ) ] = t('Viewing Network Request #@rid (@host)', array('@rid'=>$rid, '@host' => $data->hostname) );
  drupal_set_breadcrumb($breadcrumb);
  drupal_set_title( t( 'Record #@rid (@host.stanford.edu)', array( '@rid' => $rid, '@host' => $data->hostname ) ) );


  $form['network_req_delete_info'] = array(
    '#markup' => '<p class="text-info">' . l( t('NetDB'), 'https://netdb.stanford.edu/qresults?search=' . (!empty($data->wired) ? $data->wired : $data->wireless), array('attributes' => array('target' => '_blank', 'class' => array('btn', 'btn-primary'))) ) . ' (Opens in new window/tab)</p>'  ,
  );
  $form['network_req_list_info'] = array(
    '#markup' => t( theme('network-request-single',
      array(
        'data'  => $data,
        )
      )
    ),
  );

  $form['network_req_delete'] = array(
    '#title' => 'Delete',
    '#type' => 'submit',
    '#value' => 'Delete',
    '#description' => 'Are you sure you want to delete this record?',
    '#attributes' => array(
      'onclick' => 'javascript:if(confirm("This cannot be undone.  Continue?")) { return true } else { return false; };',
      'class' => array('btn', 'btn-primary')
    ),
  );
  $form['network_req_delete_cancel'] = array(
    '#title' => 'Cancel',
    '#markup' => l('Return', $base_url . '/admin/config/content/network-req/submissions', array('attributes' => array('class'=> array('btn', 'btn-info')))),
  );
  $form['network_req_delete_rid'] = array(
    '#title' => 'Cancel',
    '#type' => 'hidden',
    '#value' => $rid,
    '#description' => 'Are you sure you want to delete this record?',
  );

  return $form;

}
/**
 * Implements hook_FORM_ID_submit().
 */
function network_req_submissions_delete_submit($form, &$form_state) {

  $rid = $form_state['values']['network_req_delete_rid'];

  $result = db_delete('network_req')
  ->condition('rid', $rid)
  ->execute();
  if($result):
    $message = array( 'message' => t('Record #@rid was successfully deleted.', array('@rid' => $rid) ), 'type' => 'status' );
  else:
    $message = array('message' => t('There was a problem deleting the record.'), 'type' => 'error' );
  endif;

  drupal_set_message($message['message'], $message['type']);

  $form_state['redirect'] = url('admin/config/content/network-req/submissions');

}
/**
 *  Options for network request
 */
function network_req_options() {

  $form['network_req_dept'] = array(
    '#title' => t('Department'),
    '#type' => 'textfield',
    '#description' => t('The name of the department this form will support.'),
    '#default_value' => check_plain( variable_get('network_req_dept',0 ) ? variable_get('network_req_dept') : t('Electrical Engineering') ),
  );
  $form['network_req_title'] = array(
    '#title' => t('Form Title'),
    '#type' => 'textfield',
    '#description' => t('The title to display at the top of the network request form.'),
    '#default_value' => check_plain( variable_get('network_req_title',0 ) ? variable_get('network_req_title') : t('Electrical Engineering Network Request') ),
  );
  $form['network_req_lead'] = array(
    '#title' => t('Page information'),
    '#type' => 'textarea',
    '#description' => t('Any information / explanation you would like to display at the top of the form. (HTML is ok)'),
    '#default_value' => variable_get('network_req_lead',0 ) ? variable_get('network_req_lead') : NULL,
  );
  $form['network_req_email'] = array(
    '#title' => t('Email addresss.'),
    '#type' => 'textfield',
    '#description' => t('Email addresss the network request will go to.'),
    '#default_value' => check_plain( variable_get('network_req_email', 'ee-networking@ee.stanford.edu') ),
    '#required' => TRUE,
  );
  $form['network_req_buildings'] = array(
    '#title' => t('List of buildings this form will serve.  One on each line.'),
    '#type' => 'textarea',
    '#description' => t('One building per line.'),
    '#default_value' => check_plain( variable_get('network_req_buildings', 0) ? variable_get('network_req_buildings') : t('David Packard@lnAllen@lnAllenX@lnGates', array('@ln' => PHP_EOL)) ),
  );
  $form['network_req_computer_type'] = array(
    '#title' => t('Computer Types (One type per line)'),
    '#type' => 'textarea',
    '#description' => t('One type per line.'),
    '#default_value' => check_plain( variable_get('network_req_computer_type', 0) ? variable_get('network_req_computer_type') : t('Desktop@lnLaptop@lnServer@lnAll In One@lnNetwork Device', array('@ln' => PHP_EOL)) ),
  );
  $form['network_req_manufacturer'] = array(
    '#title' => t('Manufacturers (One per line)'),
    '#type' => 'textarea',
    '#description' => t('One per line.'),
    '#default_value' => check_plain( variable_get('network_req_manufacturer', 0) ? variable_get('network_req_manufacturer') : t('Acer@lnAlienware@lnApple@lnAsus@lnDell@lnHP@lnLenovo@lnSamsung@lnSony@lnSun@lnToshiba', array('@ln' => PHP_EOL)) ),
  );

  // Custom validation to make sure the user is entering numbers.

  $form['#validate'][] = 'network_req_options_validate';

  return system_settings_form($form);

}
/**
 * Validate settings for network_req_options
 */
function network_req_options_validate($form, &$form_state) {

  if ( !valid_email_address( $form_state['values']['network_req_email'] ) ):
    form_set_error(
      'network_req_email',
      t('Email should be in the form "@email"',
        array('@email' => 'email@{ee}.stanford.edu')
      )
    );
  endif;

}
/**
 * Print out records in the database.
 */
function network_req_submissions() {

  global $base_url;

  drupal_set_title( variable_get('network_req_dept', 0) ? t('@dept Network Request Submissions', array('@dept' => variable_get('network_req_dept') ) ) : t('Electrical Engineering Network Request Submissions') );

  //drupal_set_title( t( 'Electrical Engineering Network Request Submissions') );

  $result = db_query( "SELECT * FROM {network_req} ORDER BY ts DESC" );
  $count = $result->rowCount();
  $data = $result->fetchAll();

  return theme('view',
    array(
      'data'  => $data,
      'count' => $count,
      'base_url' => $base_url,
      'ts'    => date('r'),
    )
  );

}
function array_trim($array) {
    foreach($array as $str):
      $trim[] = trim($str);
    endforeach;
    return $trim;
  }
function network_request_map_assoc($var) {

  switch( strtolower($var) ):
    case 'network_req_buildings':
      $default = drupal_map_assoc( array(
        'Packard',
        'Allen (CIS)',
        'Allen Extension (CISX)'
      ) );
      $buildings = variable_get('network_req_buildings',0) ? explode(PHP_EOL, variable_get('network_req_buildings') ) : FALSE;
      if(!$buildings):
        $array = $default;
      else:
        $array = drupal_map_assoc( array_trim($buildings) );
      endif;
    break;
    case 'network_req_manufacturer':
      $default = drupal_map_assoc( array(
        t('Acer'),
        t('Alienware'),
        t('Apple'),
        t('Asus'),
        t('Dell'),
        t('HP'),
        t('Lenovo'),
        t('Samsung'),
        t('Sony'),
        t('Sun'),
        t('Toshiba')
      ) );

      $manufacturers = variable_get('network_req_manufacturer',0) ? explode(PHP_EOL, variable_get('network_req_manufacturer') ) : FALSE;
      if(!$manufacturers):
        $array = $default;
      else:
        $array = drupal_map_assoc( array_trim($manufacturers) );
      endif;

     // $array = variable_get('network_req_manufacturer', 0) ? drupal_map_assoc( explode( PHP_EOL, variable_get('network_req_manufacturer') ) ) : $default;
      ksort($array);
      $array['Other'] = t('Other');
    break;
    case 'network_req_computer_type':
    break;
  endswitch;

  return $array;
}
/**
 * Implements hook_form().
 */
function network_req_form() {

  // Check to see if we are webauthed
  if( isset($_SERVER['WEBAUTH_USER']) ):
    $sunetid = $_SERVER['WEBAUTH_USER'];
  elseif( isset($_SERVER['REDIRECT_WEBAUTH_USER']) ):
    $sunetid = $_SERVER['REDIRECT_WEBAUTH_USER'];
  else:
    $sunetid = '';
  endif;
  // Set a cookie (Not implemented yet)
  $network_cookie = array(
    'ip' => $_SERVER['REMOTE_ADDR'],
    'sunet' => $sunetid,
    'ts' => REQUEST_TIME
  );
  $network_cookie = json_encode($network_cookie);
  $network_cookie = array(
    'nr' => $network_cookie,
  );
  user_cookie_save($network_cookie);

  drupal_set_title( variable_get( 'network_req_title', t('Electrical Engineering Network Request') ) );

  $form['computer']['snf_wireless'] = array(
    '#markup' => variable_get('network_req_lead', t('If you are an SNF visitor, please connect to the <span class="text-ee"><a href="@href" title="Stanford Visitor">Stanford Visitor</a></span> network.', array('@href' => 'https://itservices.stanford.edu/service/wirelessnet/access')) ),
    '#prefix' => t('<p class="lead">'),
    '#suffix' => t('</p><h2>Computer Information</h2>')
  );  // Information for visitors.

  $form['computer']['type'] = array(
    '#type' => 'select',
    '#title' => t('Computer Type'),
    '#options' => array(
      'Desktop' => t('Desktop'),
      'Laptop' => t('Laptop'),
      'Server' => t('Server'),
      'All In One' => t('All In One'),
      'Network Device' => t('Network Device (Switch, Router)'),
      'Other' => t('Other'),
    ),
    '#description' => t('General Type of Computer to be Registered.'),
    '#required' => TRUE,
   );

   $form['computer']['manufacturer'] = array(
    '#type' => 'select',
    '#title' => t('Manufacturer'),
    '#options' => network_request_map_assoc('network_req_manufacturer'),
    '#description' => t('Manufacturer of Computer to be Registered.'),
    '#required' => TRUE,
   );

  $form['computer']['manufacturer_other'] = array(
    '#type' => 'textfield',
    '#title' => t('<em>Other Manufacturer</em>'),
    '#description' => t('If your computer manufacturer wasn\'t listed type it above'),
    '#size' => 40,
    '#required' => FALSE,
    '#element_validate' => array('__validate_other'),
    '#states' => array(
      'required' => array(
        'select[name="manufacturer"]' => array(
          'value' => 'Other',
        ),
      ),
      'visible' => array(
        'select[name="manufacturer"]' => array(
          'value' => 'Other',
        ),
      ),
    ),
  );
  $form['computer']['model'] = array(
    '#type' => 'textfield',
    '#title' => t('Model'),
    '#field_suffix' => t('<div class="description">(e.g. Macbook Air, AMD, Intel i7 )</div>'),
    '#size' => 40,
    '#required' => TRUE,
  );
  $form['computer']['os'] = array(
    '#type' => 'textfield',
    '#title' => t('Operating System'),
    '#field_suffix' => t('<div class="description">(e.g. OS/X, Windows 7, Linux Debian 7, Solaris 10)</div>'),
    '#size' => 40,
    '#required' => TRUE,
  );
  $form['computer']['mac_help'] = array(
    '#markup' => t('
      <div id="mac_help">
        <p>
          <a href="@help_url" target="_blank">Help with Hardware Addresses</a> (Opens in new window)<br />
          <small><em>If you need to register additional interfaces include them in the comments at the bottom of this form.</em></small>
        </p>
      </div>', array('@help_url' => url('network-request/find-mac') ) ),
  );
  $form['computer']['mac']['wired'] = array(
    '#type' => 'textfield',
    '#title' => t('Wired Hardware Address (MAC)'),
    '#field_suffix' => t('<em id="uniq_mac_wired">(eg. aa:bb:cc:dd:ee:ff)</em>'),
    '#description' => t('Wired Hardware address'),
    '#maxlength' =>  18,
    '#size' => 18,
    '#element_validate' => array('__validate_mac'),
    '#ajax' => array(
      'callback' => '__check_mac',
      'wrapper' => 'uniq_mac_wired',
      'method' => 'replace',
      'effect' => 'slide',
      'event' => 'blur',
    ),

  );
  $form['computer']['mac']['wireless'] = array(
    '#type' => 'textfield',
    '#title' => t('Wireless Hardware Address (MAC)'),
    '#field_suffix' => t('<em id="uniq_mac_wireless">(eg. aa:bb:cc:dd:ee:ff)</em>'),
    '#description' => t('Wireless hardware address'),
    '#maxlength' =>  18,
    '#size' => 18,
    '#element_validate' => array('__validate_mac'),
    '#ajax' => array(
      'callback' => '__check_mac',
      'wrapper' => 'uniq_mac_wireless',
      'method' => 'replace',
      'effect' => 'slide',
      'event' => 'blur',
    ),
  );
  $form['computer']['hostname'] = array(
    '#type' => 'textfield',
    '#title' => t('Chosen Hostname'),
    '#field_suffix' => t('<em id="uniq_host">.stanford.edu (Must Be Unique!)</em>'),
    '#description' => t('Your chosen hostname without .stanford.edu.  This is unique to the university. <br />(eg. myhost, myname-dell-laptop, sunetid-macbook)'),
    '#size' => 40,
    '#element_validate' => array('__validate_host'),
    '#ajax' => array(
      'callback' => '__check_host',
      'wrapper' => 'uniq_host',
      'method' => 'replace',
      'effect' => 'slide',
      'event' => 'blur',
    ),
    '#required' => TRUE,
  );
  $form['computer']['tso'] = array(
    '#type' => 'textfield',
    '#title' => t('Jack (TSO) Number'),
    '#description' => t('The jack number is usually of the format: "1.1 1001"'),
    '#field_suffix' => t('
      <div id="tso_help" style="display:inline-block;">
        <a href="@help_url" target="_blank">Picture of TSO.</a> (Opens in new window)
      </div>', array('@help_url' => drupal_get_path('module', 'network_req') . '/images/tso.png') ),
    '#size' => 6,
    '#max_length' => 8,
    '#element_validate' => array('__validate_number'),
    '#states' => array(
      'invisible' => array(
        ':input[name="wired"]' => array(
          'value' => '',
        ),
      ),
      'required' => array(
        ':input[name="tso"]' => array(
          'visible' => TRUE,
        ),
      ),
    ),
  );

  $form['info']['first'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name'),
    '#description' => t('Your First Name'),
    '#required' => TRUE,
    '#size' => 40,
    '#prefix' => t('<h2>Information about yourself</h2>'),
  );
  $form['info']['last'] = array(
    '#type' => 'textfield',
    '#title' => t('Last Name'),
    '#description' => t('Your Last Name'),
    '#required' => TRUE,
    '#size' => 40,
  );

  $form['info']['sunetid'] = array(
    '#type' => 'textfield',
    '#title' => t('SUNet ID'),
    '#description' => t('Your Stanford University ID'),
    '#size' => 20,
    '#default_value' => $sunetid,
    '#element_validate' => array('__validate_sunetid'),
    '#required' => TRUE,

  );
  $form['info']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#description' => t('Type this address in correctly, this is where the reply will be sent!'),
    '#size' => 40,
    '#required' => TRUE,
    '#element_validate' => array('__validate_email'),
  );
  $form['info']['building'] = array( // Building
    '#type' => 'select',
    '#title' => t('Building'),
    '#options' => network_request_map_assoc('network_req_buildings'),
    '#required' => TRUE,
   );

  $form['info']['office'] = array(
    '#type' => 'textfield',
    '#title' => t('Room Number'),
    '#description' => t('Office Room Number (101X, B103X, 200)'),
    '#size' => 5,
    '#max_length' => 5,
    '#required' => TRUE,
    '#element_validate' => array('__validate_number'),
  );
  $form['info']['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Stanford Phone Number'),
    '#description' => t('Your phone number xxx-xxx-xxxx'),
    '#size' => 12,
    '#maxlength' =>  17,
    '#default_value' => '650-',
    '#element_validate' => array('__validate_phone'),
  );
  $form['info']['sysadmin'] = array(
    '#type' => 'textfield',
    '#title' => t('System Administrator Name'),
    '#description' => t('This is your dept. or group administrator. If you are unsure, put down yourself.'),
    '#required' => TRUE,
    '#size' => 40,
  );
  $form['info']['sysadminemail'] = array(
    '#type' => 'textfield',
    '#title' => t('System Administrator Email'),
    '#description' => t('This is your dept. or group administrator\'s email. If you are unsure, put down your email address.'),
    '#size' => 40,
    '#required' => TRUE,
    '#element_validate' => array('__validate_email'),
  );
  $form['info']['research_group'] = array(
    '#type' => 'textfield',
    '#title' => t('Research group / EE Affilliation'),
    '#description' => t('Research group / EE Affilliation : (e.g. Prof x Research Group, Prof. x, EExxx Head TA)'),
    '#size' => 40,
    '#required' => FALSE,
  );
  $form['comments'] = array(
    '#type' => 'textarea',
    '#title' => t('Additional Comments'),
    '#description' =>  t('If you have any additional comments about this computer please enter them here.')
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Register Computer'),
    '#weight' => 20,
  );

  return $form;

}
/**
 * Validation
 */
function network_req_form_validate($form, &$form_state) {

  if( empty($form['computer']['mac']['wired']['#value']) &&  empty($form['computer']['mac']['wireless']['#value']) ):
    form_set_error('wired', t('Either a wired or a wireless mac address is required.  Both cannot be blank'));
  endif;

}
/**
 * Implements hook_mail().
 */
function network_req_form_mail($key, &$message, $params) {

  $headers = array(
    'MIME-Version' => '1.0',
    'Content-Type' => 'text/html; charset=utf-8',
    'Content-Transfer-Encoding' => '8Bit',
    'X-Mailer' => phpversion() . '/ Drupal 7'
  );

  foreach ($headers as $key => $value) {
    $message['headers'][$key] = $value;
  }

  $message['subject'] = $params['subject'];
  $message['body'] = $params['body'];
}
/**
 * Implements hook_FORM_ID_submit().
 */
function network_req_form_submit($form, &$form_state) {

  drupal_set_message(t('Your network request has been sent.  It could take up to 24 hours to get a response.  Below are the values you submitted.'), 'warning');

  $info_array = array('first', 'last', 'sunetid', 'email', 'building', 'office', 'phone', 'sysadmin', 'sysadminemail', 'research_group');
  $comp_array = array('type', 'manufacturer', 'manufacturer_other', 'model', 'os', 'wired', 'wireless', 'hostname', 'tso', 'mac');
  $fields = array();
  foreach($form['computer'] as $index => $value):
    if(in_array($index, $comp_array)):
      if($index == 'mac'):
        foreach($value as $i => $v):
          if(isset($v['#title'])):
            $fields[$v['#name']]['title'] = preg_replace('/\(MAC\)/', '', $v['#title']);
            $fields[$v['#name']]['value'] = $v['#value'];
            $fields[$v['#name']]['name'] = $v['#name'];
          endif;
        endforeach;
      else:
        if($index == 'manufacturer'):
          if($value['#value'] == 'Other'):
            $fields['manufacturer']['title'] = 'Manufacturer';
            $fields['manufacturer']['value'] = $form['computer']['manufacturer_other']['#value'];
            $fields['manufacturer']['name'] = 'manufacturer';
          else:
            $fields['manufacturer']['title'] = 'Manufacturer';
            $fields['manufacturer']['value'] = $form['computer']['manufacturer']['#value'];
            $fields['manufacturer']['name'] = 'manufacturer';
          endif;
        else:
          $fields[$value['#name']]['title'] = $value['#title'];
          $fields[$value['#name']]['value'] = $value['#value'];
          $fields[$value['#name']]['name'] = $value['#name'];
        endif;
      endif;
    endif;
  endforeach;

  foreach($form['info'] as $index => $value):
    if(in_array($index, $info_array)):
      $fields[$value['#name']]['title'] = $value['#title'];
      $fields[$value['#name']]['value'] = $value['#value'];
      $fields[$value['#name']]['name'] = $value['#name'];
    endif;
  endforeach;

  $fields['comments']['title'] = 'Comments';
  $fields['comments']['value'] = wordwrap($form_state['values']['comments']);
  $fields['comments']['name'] = 'comments';


  $suid = array(
    'title' => $fields['sunetid']['title'],
    'value' => $fields['sunetid']['value']
  );

  $data = array(
    'computer_type' => array(
      'title' => $fields['type']['title'],
      'value' => $fields['type']['value']
    ),
    'manufacturer' =>  array(
      'title' => $fields['manufacturer']['title'],
      'value' => $fields['manufacturer']['value']
    ),
    'model' => array(
      'title' => $fields['model']['title'],
      'value' => $fields['model']['value']
    ),
    'os' => array(
      'title' => $fields['os']['title'],
      'value' => $fields['os']['value']
    ),
    'wired' => array(
      'title' => $fields['wired']['title'],
      'value' => $fields['wired']['value']
    ),
    'wireless' => array(
      'title' => $fields['wireless']['title'],
      'value' => $fields['wireless']['value']
    ),
    'hostname' => array(
      'title' => $fields['hostname']['title'],
      'value' => $fields['hostname']['value']
    ),
    'tso' => array(
      'title' => $fields['tso']['title'],
      'value' => $fields['tso']['value']
    ),
    'fname' => array(
      'title' => $fields['first']['title'],
      'value' => $fields['first']['value']
    ),
    'lname' => array(
      'title' => $fields['last']['title'],
      'value' => $fields['last']['value']
    ),
    'sunetid' => $suid,
    'email' => array(
      'title' => $fields['email']['title'],
      'value' => $fields['email']['value']
    ),
    'building' => array(
      'title' => $fields['building']['title'],
      'value' => $fields['building']['value']
    ),
    'room' => array(
      'title' => $fields['office']['title'],
      'value' => $fields['office']['value']
    ),
    'phone' => array(
      'title' => $fields['phone']['title'],
      'value' => $fields['phone']['value']
    ),
    'sysadmin' => array(
      'title' => $fields['sysadmin']['title'],
      'value' => $fields['sysadmin']['value']
    ),
    'sysadmin_email' => array(
      'title' => $fields['sysadminemail']['title'],
      'value' => $fields['sysadminemail']['value']
    ),
    'research_group' => array(
      'title' => $fields['research_group']['title'],
      'value' => $fields['research_group']['value']
    ),
    'comments' => array(
      'title' => $fields['comments']['title'],
      'value' => $fields['comments']['value']
    ),
    'ts' => format_date(REQUEST_TIME, 'custom', 'Y-m-d H:i:s'),
  );
  $sql = array();
  foreach($data as $i => $v):
    if($i == 'ts'):
      $sql['ts'] = format_date(REQUEST_TIME, 'custom', 'Y-m-d H:i:s');
    else:
      $sql[$i] = $v['value'];
    endif;
  endforeach;
  drupal_write_record('network_req', $sql);

  $b = '<pre>';
  foreach($data as $i => $k):
    if( empty($k['value']) ):
      continue;
    endif;

    $repeat = ( 34 - strlen($k['title']) );
    if($k['title'] == 'Comments'):
      $b .=  $k['title'] . str_repeat('.', $repeat) . ': <p>' . $k['value'] . '</p>' . "\n";
    else:
      $b .= $k['title'] . str_repeat('.', $repeat) . ': ' . $k['value'] . "\n";
    endif;
  endforeach;
  $b .= '</pre>';
  drupal_set_message($b);

    $unknown_state = isset($_SESSION['unknown_state']) ? TRUE : FALSE;
    unset($_SESSION['unknown_state']);
    $from = $fields['email']['value'];
    $head = 'Network request from ' . $fields['first']['value'] . ' ' . $fields['last']['value'] . ' <' . $fields['email']['value'] . '>';
    $head .= "\n" . 'Request Date / Time : ' . $data['ts'] . "\n\n";
    $body[] = '<html><body>' . $head . $b . '</body></html>';
    // Set this email address at 'admin/config/content/network-req', emails will be sent to this email address!
    $to = variable_get('network_req_email', 'ee-networking@ee.stanford.edu');
    $params = array(
    'body' => $body,
    'subject' => t('(' . ucwords($fields['building']['value']) . ') Network Request@unknown', array('@unknown' => ($unknown_state ? ' (UNKNOWN STATE)' : '') ) ),
    );

    if (drupal_mail('network_req_form', md5($fields['email']['value']), $to, language_default(), $params, $from, TRUE)):

    else:
      drupal_set_message('There was an error submitting your request. Please try again later', 'error');
    endif;

}


// End Module




